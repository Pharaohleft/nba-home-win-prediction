# -*- coding: utf-8 -*-
"""Untitled23.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vooxzqjo0mBOtSPqPRaC7ozarB3epMoC
"""

import pandas as pd

# Load games dataset
games = pd.read_csv('/content/games.csv')
games.head()

# Check the shape of the dataset
print("Shape of games dataset:", games.shape)

# Display column names
print("\nColumns in games dataset:")
print(games.columns)

# Get a quick summary of the dataset
print("\nDataset Info:")
print(games.info())

# Check for missing values
print("\nMissing values in each column:")
print(games.isnull().sum())

# Basic statistical summary
print("\nStatistical Summary:")
print(games.describe())

# Check the first few rows to see how data looks
games.head()

# Drop rows with missing values
games_cleaned = games.dropna()

# Verify missing values are gone
print("Missing values after cleaning:")
print(games_cleaned.isnull().sum())

# Check the shape of cleaned dataset
print("\nShape after cleaning:", games_cleaned.shape)

"""# New Section"""

# Feature columns
feature_cols = [
    'PTS_home', 'FG_PCT_home', 'FT_PCT_home', 'FG3_PCT_home', 'AST_home', 'REB_home',
    'PTS_away', 'FG_PCT_away', 'FT_PCT_away', 'FG3_PCT_away', 'AST_away', 'REB_away'
]

# Features and target
X = games_cleaned[feature_cols]
y = games_cleaned['HOME_TEAM_WINS']

print("Feature matrix shape:", X.shape)
print("Target vector shape:", y.shape)

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Split data into training and testing sets (80/20)
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# Initialize logistic regression model
model = LogisticRegression(max_iter=1000)

# Train the model
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate performance
acc = accuracy_score(y_test, y_pred)
print("âœ… Model Accuracy:", acc)

print("\nðŸ”Ž Classification Report:")
print(classification_report(y_test, y_pred))

print("\nðŸ“Š Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

import seaborn as sns
import matplotlib.pyplot as plt

# Add target to dataframe for easier correlation calculation
games_cleaned_copy = games_cleaned.copy()
games_cleaned_copy['TARGET'] = y

# Correlation matrix
corr_matrix = games_cleaned_copy[feature_cols + ['TARGET']].corr()

# Plot heatmap
plt.figure(figsize=(10,8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.title("Correlation Matrix with Target")
plt.show()